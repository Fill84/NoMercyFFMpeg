name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of all images'
        required: true
        type: boolean
        default: true

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      workflow-changed: ${{ steps.check-workflow.outputs.changed }}
      base-changed: ${{ steps.check-base.outputs.changed }}
      linux-x86_64-changed: ${{ steps.check-linux-x86_64.outputs.changed }}
      linux-aarch64-changed: ${{ steps.check-linux-aarch64.outputs.changed }}
      windows-x86_64-changed: ${{ steps.check-windows-x86_64.outputs.changed }}
      # windows-arm64-changed: ${{ steps.check-windows-arm64.outputs.changed }}
      darwin-x86_64-changed: ${{ steps.check-darwin-x86_64.outputs.changed }}
      darwin-arm64-changed: ${{ steps.check-darwin-arm64.outputs.changed }}
      version: ${{ steps.bump-version.outputs.version }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master

      - name: Bump version
        id: bump-version
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          echo "LATEST_TAG=$LATEST_TAG" 

          # Extract components
          MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
          PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)

          # Validate components
          echo "MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          # Increment patch version
          NEW_PATCH=$(($PATCH + 1))
          NEW_VERSION=v$MAJOR.$MINOR.$NEW_PATCH 
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Check workflow changes
        id: check-workflow
        run: |
          echo force: ${{ github.event.inputs.force_rebuild }}
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q ".github/workflows/main.yml" && CHANGED=true
            git diff --name-only HEAD^ HEAD | grep -q ".github/workflows/test.yml" && CHANGED=true
            git diff --name-only HEAD^ HEAD | grep -q ".github/workflows/release.yml" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check base image changes
        id: check-base
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-base.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Linux x86_64 image changes
        id: check-linux-x86_64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-linux-x86_64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Linux Aarch64 image changes
        id: check-linux-aarch64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-linux-aarch64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
          
      - name: Check Windows x86_64 image changes
        id: check-windows-x86_64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-windows-x86_64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      # - name: Check Windows Arm64 image changes
        # id: check-windows-arm64
        # run: |
        #   git config --global --add safe.directory ${{ github.workspace }}
        #   if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
        #     CHANGED=true
        #   else
        #     CHANGED=false
        #     git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-windows-arm64.dockerfile" && CHANGED=true
        #   fi
        #   echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Darwin x86_64 image changes
        id: check-darwin-x86_64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-darwin-x86_64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Darwin arm64 image changes
        id: check-darwin-arm64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-darwin-arm64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

  build-base:
    needs: check-changes
    if: needs.check-changes.outputs.base-changed || needs.check-changes.outputs.workflow-changed || github.event.inputs.force_rebuild
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-base.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-base:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-base:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-base:buildcache,mode=max

  build-linux-x86_64:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.linux-x86_64-changed || needs.check-changes.outputs.base-changed || needs.check-changes.outputs.workflow-changed || github.event.inputs.force_rebuild
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          token: ${{ secrets.PAT_TOKEN }}
          repository: "NoMercy-Entertainment/FFMPEG-Secrets"
          path: "${{ github.workspace }}/FFMPEG-Secrets"
      
      - name: Copy secrets
        run: |
          cp -r FFMPEG-Secrets/* ${{ github.workspace }}/scripts/
          rm -rf FFMPEG-Secrets

      - name: Build and push Linux x86_64 image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-linux-x86_64.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-linux-x86_64:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-linux-x86_64:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-linux-x86_64:buildcache,mode=max

  build-linux-aarch64:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.linux-aarch64-changed || needs.check-changes.outputs.base-changed || needs.check-changes.outputs.workflow-changed || github.event.inputs.force_rebuild
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          token: ${{ secrets.PAT_TOKEN }}
          repository: "NoMercy-Entertainment/FFMPEG-Secrets"
          path: "${{ github.workspace }}/FFMPEG-Secrets"
      
      - name: Copy secrets
        run: |
          cp -r FFMPEG-Secrets/* ${{ github.workspace }}/scripts/
          rm -rf FFMPEG-Secrets

      - name: Build and push Aarch64 image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-linux-aarch64.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-linux-aarch64:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-linux-aarch64:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-linux-aarch64:buildcache,mode=max

  build-windows-x86_64:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.windows-x86_64-changed || needs.check-changes.outputs.base-changed || needs.check-changes.outputs.workflow-changed || github.event.inputs.force_rebuild
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          token: ${{ secrets.PAT_TOKEN }}
          repository: "NoMercy-Entertainment/FFMPEG-Secrets"
          path: "${{ github.workspace }}/FFMPEG-Secrets"
      
      - name: Copy secrets
        run: |
          cp -r FFMPEG-Secrets/* ${{ github.workspace }}/scripts/
          rm -rf FFMPEG-Secrets

      - name: Build and push Windows image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-windows-x86_64.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-windows-x86_64:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-windows-x86_64:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-windows-x86_64:buildcache,mode=max

  # build-windows-arch64:
    # needs: [check-changes, build-base]
    # if: needs.check-changes.outputs.windows-arch64-changed || needs.check-changes.outputs.base-changed || needs.check-changes.outputs.workflow-changed
    # runs-on: ubuntu-latest
    # steps:
    #   - name: Free Disk Space (Ubuntu)
    #     uses: jlumbroso/free-disk-space@main
    #     with:
    #       tool-cache: false
    #       android: true
    #       dotnet: true
    #       haskell: true
    #       large-packages: true
    #       docker-images: true
    #       swap-storage: true

    #   - name: Checkout Code
    #     uses: actions/checkout@v4

    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v2

    #   - name: Log in to DockerHub
    #     uses: docker/login-action@v2
    #     with:
    #       username: ${{ secrets.DOCKER_USERNAME }}
    #       password: ${{ secrets.DOCKER_PASSWORD }}
      
    #   - name: Checkout Secrets
    #     uses: actions/checkout@v4
    #     with:
    #       fetch-depth: 0
    #       ref: master
    #       token: ${{ secrets.GITHUB_TOKEN }}
    #       ref: master
    #       repository: NoMercy-Entertainment/FFMPEG-Secrets  
    #       path: FFMPEG-Secrets
       
    #   - name: Copy secrets
    #     run: |
    #       cp -r FFMPEG-Secrets/* ${{ github.workspace }}/scripts/
    #       rm -rf FFMPEG-Secrets

    #   - name: Build and push Windows image
    #     uses: docker/build-push-action@v4
    #     with:
    #       context: .
    #       file: ffmpeg-windows-arch64.dockerfile
    #       push: true
    #       tags: nomercyentertainment/ffmpeg-windows-arch64:latest
    #       cache-from: type=registry,ref=nomercyentertainment/ffmpeg-windows-arch64:buildcache
    #       cache-to: type=registry,ref=nomercyentertainment/ffmpeg-windows-arch64:buildcache,mode=max

  build-darwin-x86_64:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.darwin-x86_64-changed || needs.check-changes.outputs.base-changed || needs.check-changes.outputs.workflow-changed || github.event.inputs.force_rebuild
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          token: ${{ secrets.PAT_TOKEN }}
          repository: "NoMercy-Entertainment/FFMPEG-Secrets"
          path: "${{ github.workspace }}/FFMPEG-Secrets"
      
      - name: Copy secrets
        run: |
          cp -r FFMPEG-Secrets/* ${{ github.workspace }}/scripts/
          rm -rf FFMPEG-Secrets

      - name: Build and push Darwin image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-darwin-x86_64.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-darwin-x86_64:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-darwin-x86_64:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-darwin-x86_64:buildcache,mode=max

  build-darwin-arm64:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.darwin-arm64-changed || needs.check-changes.outputs.base-changed || needs.check-changes.outputs.workflow-changed || github.event.inputs.force_rebuild
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          token: ${{ secrets.PAT_TOKEN }}
          repository: "NoMercy-Entertainment/FFMPEG-Secrets"
          path: "${{ github.workspace }}/FFMPEG-Secrets"
      
      - name: Copy secrets
        run: |
          cp -r FFMPEG-Secrets/* ${{ github.workspace }}/scripts/
          rm -rf FFMPEG-Secrets

      - name: Build and push Darwin image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-darwin-arm64.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-darwin-arm64:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-darwin-arm64:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-darwin-arm64:buildcache,mode=max

  export-artifacts:
    runs-on: ubuntu-latest
    needs: [build-linux-x86_64, build-linux-aarch64, build-windows-x86_64, build-darwin-x86_64, build-darwin-arm64, check-changes] #, build-windows-arm64
    if: needs.check-changes.outputs.base-changed || needs.check-changes.outputs.linux-x86_64-changed || needs.check-changes.outputs.linux-aarch64-changed || needs.check-changes.outputs.windows-x86_64-changed || needs.check-changes.outputs.darwin-x86_64-changed || needs.check-changes.outputs.darwin-arm64-changed || needs.check-changes.outputs.workflow-changed  || github.event.inputs.force_rebuild
    #|| needs.check-changes.outputs.windows-arm64-changed
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Export Linux x86_64 Artifact
        run: |
          mkdir -p downloads/linux-x86_64
          docker pull nomercyentertainment/ffmpeg-linux-x86_64:latest
          docker create --name linux-x86_64-container nomercyentertainment/ffmpeg-linux-x86_64:latest
          docker cp linux-x86_64-container:/build/ffmpeg-8.0-linux-x86_64.tar.gz downloads/ffmpeg-8.0-linux-x86_64.tar.gz || echo "File not found in container."
          # docker cp linux-x86_64-container:/build/linux-x86_64 downloads/linux-x86_64 || echo "Directory not found in container."
          docker rm linux-x86_64-container
          
      - name: Export Linux Aarch64 Artifact
        run: |
          mkdir -p downloads/aarch64
          docker pull nomercyentertainment/ffmpeg-linux-aarch64:latest
          docker create --name linux-aarch64-container nomercyentertainment/ffmpeg-linux-aarch64:latest
          docker cp linux-aarch64-container:/build/ffmpeg-8.0-linux-aarch64.tar.gz downloads/ffmpeg-8.0-linux-aarch64.tar.gz || echo "File not found in container."
          # docker cp linux-aarch64-container:/build/aarch64 downloads/aarch64 || echo "Directory not found in container."
          docker rm linux-aarch64-container

      - name: Export Windows x86_64 Artifact
        run: |
          mkdir -p downloads/windows-x86_64
          docker pull nomercyentertainment/ffmpeg-windows-x86_64:latest
          docker create --name windows-x86_64-container nomercyentertainment/ffmpeg-windows-x86_64:latest
          docker cp windows-x86_64-container:/build/ffmpeg-8.0-windows-x86_64.zip downloads/ffmpeg-8.0-windows-x86_64.zip || echo "File not found in container."
          # docker cp windows-x86_64-container:/build/windows downloads/windows-x86_64 || echo "Directory not found in container."
          docker rm windows-x86_64-container

      # - name: Export Windows arm64 Artifact
        # run: |
        #   mkdir -p downloads/windows-arm64
        #   docker pull nomercyentertainment/ffmpeg-windows-arm64:latest
        #   docker create --name windows-arm64-container nomercyentertainment/ffmpeg-windows-arm64:latest
        #   docker cp windows-arm64-container:/build/ffmpeg-8.0-windows-arm64.tar.gz downloads/ffmpeg-8.0-windows-arm64.tar.gz || echo "File not found in container."
        #   docker cp windows-arm64-container:/build/windows downloads/windows-arm64 || echo "Directory not found in container."
        #   docker rm windows-arm64-container

      - name: Export Darwin x86_64 Artifact
        run: |
          mkdir -p downloads/darwin/x86_64
          docker pull nomercyentertainment/ffmpeg-darwin-x86_64:latest
          docker create --name darwin-x86_64-container nomercyentertainment/ffmpeg-darwin-x86_64:latest
          docker cp darwin-x86_64-container:/build/ffmpeg-8.0-darwin-x86_64.tar.gz downloads/ffmpeg-8.0-darwin-x86_64.tar.gz || echo "File not found in container."
          # docker cp darwin-x86_64-container:/build/darwin/x86_64 downloads/darwin/x86_64 || echo "Directory not found in container."
          docker rm darwin-x86_64-container

      - name: Export Darwin arm64 Artifact
        run: |
          mkdir -p downloads/darwin/arm64
          docker pull nomercyentertainment/ffmpeg-darwin-arm64:latest
          docker create --name darwin-arm64-container nomercyentertainment/ffmpeg-darwin-arm64:latest
          docker cp darwin-arm64-container:/build/ffmpeg-8.0-darwin-arm64.tar.gz downloads/ffmpeg-8.0-darwin-arm64.tar.gz || echo "File not found in container."
          # docker cp darwin-arm64-container:/build/darwin/arm64 downloads/darwin/arm64 || echo "Directory not found in container."
          docker rm darwin-arm64-container
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: downloads/