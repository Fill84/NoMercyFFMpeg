name: Parallel Docker Builds with Caching

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of all images'
        required: true
        type: boolean
        default: true

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      base-changed: ${{ steps.check-base.outputs.changed }}
      linux-changed: ${{ steps.check-linux.outputs.changed }}
      windows-changed: ${{ steps.check-windows.outputs.changed }}
      aarch64-changed: ${{ steps.check-aarch64.outputs.changed }}
      darwin-x86_64-changed: ${{ steps.check-darwin-x86_64.outputs.changed }}
      darwin-arm64-changed: ${{ steps.check-darwin-arm64.outputs.changed }}
      version: ${{ steps.bump-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Bump version
        id: bump-version
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          # Extract components
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Check base image changes
        id: check-base
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-base.dockerfile" && CHANGED=true
            git diff --name-only HEAD^ HEAD | grep -q "^scripts/base/" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Linux image changes
        id: check-linux
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-linux.dockerfile" && CHANGED=true
            git diff --name-only HEAD^ HEAD | grep -q "^scripts/linux/" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Windows image changes
        id: check-windows
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-windows.dockerfile" && CHANGED=true
            git diff --name-only HEAD^ HEAD | grep -q "^scripts/windows/" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Aarch64 image changes
        id: check-aarch64
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-aarch64.dockerfile" && CHANGED=true
            git diff --name-only HEAD^ HEAD | grep -q "^scripts/aarch64/" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Darwin x86_64 image changes
        id: check-darwin-x86_64
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-darwin-x86_64.dockerfile" && CHANGED=true
            git diff --name-only HEAD^ HEAD | grep -q "^scripts/darwin/" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Darwin arm64 image changes
        id: check-darwin-arm64
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-darwin-arm64.dockerfile" && CHANGED=true
            git diff --name-only HEAD^ HEAD | grep -q "^scripts/darwin/" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

  build-base:
    needs: check-changes
    if: needs.check-changes.outputs.base-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-base.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-base:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-base:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-base:buildcache,mode=max

  build-linux:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.linux-changed == 'true' || needs.check-changes.outputs.base-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Linux image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-linux.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-linux:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-linux:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-linux:buildcache,mode=max

  build-windows:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.windows-changed == 'true' || needs.check-changes.outputs.base-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Windows image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-windows.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-windows:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-windows:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-windows:buildcache,mode=max

  build-aarch64:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.aarch64-changed == 'true' || needs.check-changes.outputs.base-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Aarch64 image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-aarch64.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-aarch64:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-aarch64:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-aarch64:buildcache,mode=max

  build-darwin-x86_64:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.darwin-x86_64-changed == 'true' || needs.check-changes.outputs.base-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Darwin image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-darwin-x86_64.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-darwin-x86_64:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-darwin-x86_64:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-darwin-x86_64:buildcache,mode=max

  build-darwin-arm64:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.darwin-arm64-changed == 'true' || needs.check-changes.outputs.base-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Darwin image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ffmpeg-darwin-arm64.dockerfile
          push: true
          tags: nomercyentertainment/ffmpeg-darwin-arm64:latest
          cache-from: type=registry,ref=nomercyentertainment/ffmpeg-darwin-arm64:buildcache
          cache-to: type=registry,ref=nomercyentertainment/ffmpeg-darwin-arm64:buildcache,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-aarch64, build-darwin-x86_64, build-darwin-arm64, check-changes]
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-changes.outputs.version }}
          release_name: ${{ needs.check-changes.outputs.version }}
          draft: false
          prerelease: false

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Export Linux Artifact
        run: |
          mkdir -p downloads/linux
          docker pull nomercyentertainment/ffmpeg-linux:latest
          docker create --name linux-container nomercyentertainment/ffmpeg-linux:latest
          docker cp linux-container:/build/ffmpeg-linux-7.1.tar.gz downloads/ffmpeg-linux-7.1.tar.gz || echo "File not found in container."
          docker cp linux-container:/build/linux downloads/linux || echo "Directory not found in container."
          docker rm linux-container

      - name: Export Windows Artifact
        run: |
          mkdir -p downloads/windows
          docker pull nomercyentertainment/ffmpeg-windows:latest
          docker create --name windows-container nomercyentertainment/ffmpeg-windows:latest
          docker cp windows-container:/build/ffmpeg-windows-7.1.tar.gz downloads/ffmpeg-windows-7.1.tar.gz || echo "File not found in container."
          docker cp windows-container:/build/windows downloads/windows || echo "Directory not found in container."
          docker rm windows-container

      - name: Export Aarch64 Artifact
        run: |
          mkdir -p downloads/aarch64
          docker pull nomercyentertainment/ffmpeg-aarch64:latest
          docker create --name aarch64-container nomercyentertainment/ffmpeg-aarch64:latest
          docker cp aarch64-container:/build/ffmpeg-aarch64-7.1.tar.gz downloads/ffmpeg-aarch64-7.1.tar.gz || echo "File not found in container."
          docker cp aarch64-container:/build/aarch64 downloads/aarch64 || echo "Directory not found in container."
          docker rm aarch64-container

      - name: Export Darwin Artifact
        run: |
          mkdir -p downloads/darwin/x86_64
          docker pull nomercyentertainment/ffmpeg-darwin-x86_64:latest
          docker create --name darwin-container nomercyentertainment/ffmpeg-darwin-x86_64:latest
          docker cp darwin-container:/build/ffmpeg-darwin-x86_64-7.1.tar.gz downloads/ffmpeg-darwin-x86_64-7.1.tar.gz || echo "File not found in container."
          docker cp darwin-container:/build/darwin/x86_64 downloads/darwin/x86_64 || echo "Directory not found in container."
          docker rm darwin-container

      - name: Export Darwin Artifact
        run: |
          mkdir -p downloads/darwin/arm64
          docker pull nomercyentertainment/ffmpeg-darwin-arm64:latest
          docker create --name darwin-container nomercyentertainment/ffmpeg-darwin-arm64:latest
          docker cp darwin-container:/build/ffmpeg-darwin-arm64-7.1.tar.gz downloads/ffmpeg-darwin-arm64-7.1.tar.gz || echo "File not found in container."
          docker cp darwin-container:/build/darwin/arm64 downloads/darwin/arm64 || echo "Directory not found in container."
          docker rm darwin-container

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-linux-7.1.tar.gz
          asset_name: ffmpeg-linux-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-windows-7.1.tar.gz
          asset_name: ffmpeg-windows-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Aarch64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-aarch64-7.1.tar.gz
          asset_name: ffmpeg-aarch64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Darwin x86_64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-darwin-x86_64-7.1.tar.gz
          asset_name: ffmpeg-darwin-x86_64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Darwin arm64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-darwin-arm64-7.1.tar.gz
          asset_name: ffmpeg-darwin-arm64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip