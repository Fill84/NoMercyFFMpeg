name: Parallel Docker Builds with Caching

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-base:
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Short SHA
        id: get_short_sha
        run: echo "::set-output name=short_sha::${GITHUB_SHA::7}"

      - name: Cache Docker layers for base image
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.buildx-cache
          key: ${{ runner.os }}-buildx-base-${{ steps.get_short_sha.outputs.short_sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-base-

      - name: Build Base Image
        run: |
          mkdir -p ${{ github.workspace }}/.buildx-cache
          DOCKER_BUILDKIT=1 docker buildx build \
            --push \
            --tag nomercyentertainment/ffmpeg-base:latest \
            -f ffmpeg-base.dockerfile .

  build-linux:
    runs-on: ubuntu-latest
    needs: build-base
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get Short SHA
        id: get_short_sha
        run: echo "::set-output name=short_sha::${GITHUB_SHA::7}"

      - name: Cache Docker layers for Linux image
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.buildx-cache
          key: ${{ runner.os }}-buildx-linux-${{ steps.get_short_sha.outputs.short_sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-linux-

      - name: Build Linux Image
        run: |
          mkdir -p ${{ github.workspace }}/.buildx-cache
          DOCKER_BUILDKIT=1 docker buildx build \
            --load \
            --tag nomercyentertainment/ffmpeg-linux:latest \
            -f ffmpeg-linux.dockerfile .

      - name: Export Linux Artifact
        run: |
          mkdir -p downloads/linux
          docker create --name linux-container nomercyentertainment/ffmpeg-linux:latest
          docker cp linux-container:/build/ffmpeg-linux-7.1.tar.gz downloads/ffmpeg-linux-7.1.tar.gz
          docker cp linux-container:/build/linux downloads/
          docker rm linux-container

      # # Upload Linux Release Asset
      # - name: Upload Linux Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ job.status.needs.create-release.outputs.upload_url }}
      #     asset_path: downloads/ffmpeg-linux-7.1.tar.gz
      #     asset_name: ffmpeg-linux-7.1-${{ steps.get_short_sha.outputs.short_sha }}.tar.gz
      #     asset_content_type: application/gzip

  build-windows:
    runs-on: ubuntu-latest
    needs: build-base
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get Short SHA
        id: get_short_sha
        run: echo "::set-output name=short_sha::${GITHUB_SHA::7}"

      - name: Cache Docker layers for Windows image
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.buildx-cache
          key: ${{ runner.os }}-buildx-windows-${{ steps.get_short_sha.outputs.short_sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-windows-

      - name: Build Windows Image
        run: |
          mkdir -p ${{ github.workspace }}/.buildx-cache
          DOCKER_BUILDKIT=1 docker buildx build \
            --load \
            --tag nomercyentertainment/ffmpeg-windows:latest \
            -f ffmpeg-windows.dockerfile .

      - name: Export Windows Artifact
        run: |
          mkdir -p downloads/windows
          docker create --name windows-container nomercyentertainment/ffmpeg-windows:latest
          docker cp windows-container:/build/ffmpeg-windows-7.1.tar.gz downloads/ffmpeg-windows-7.1.tar.gz
          docker cp windows-container:/build/windows downloads/
          docker rm windows-container

      # # Upload Windows Release Asset
      # - name: Upload Windows Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ job.status.needs.create-release.outputs.upload_url }}
      #     asset_path: downloads/ffmpeg-windows-7.1.tar.gz
      #     asset_name: ffmpeg-windows-7.1-${{ steps.get_short_sha.outputs.short_sha }}.tar.gz
      #     asset_content_type: application/gzip

  build-aarch64:
    runs-on: ubuntu-latest
    needs: build-base
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
          
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get Short SHA
        id: get_short_sha
        run: echo "::set-output name=short_sha::${GITHUB_SHA::7}"

      - name: Cache Docker layers for Aarch64 image
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.buildx-cache
          key: ${{ runner.os }}-buildx-aarch64-${{ steps.get_short_sha.outputs.short_sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-aarch64-

      - name: Build Aarch64 Image
        run: |
          mkdir -p ${{ github.workspace }}/.buildx-cache
          DOCKER_BUILDKIT=1 docker buildx build \
            --load \
            --tag nomercyentertainment/ffmpeg-aarch64:latest \
            -f ffmpeg-aarch64.dockerfile .

      - name: Export Aarch64 Artifact
        run: |
          mkdir -p downloads/aarch64
          docker create --name aarch64-container nomercyentertainment/ffmpeg-aarch64:latest
          docker cp aarch64-container:/build/ffmpeg-aarch64-7.1.tar.gz downloads/ffmpeg-aarch64-7.1.tar.gz
          docker cp aarch64-container:/build/aarch64 downloads/
          docker rm aarch64-container

      # # Upload macOS Release Asset
      # - name: Upload Aarch64 Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ job.status.needs.create-release.outputs.upload_url }}
      #     asset_path: downloads/ffmpeg-aarch64-7.1.tar.gz
      #     asset_name: ffmpeg-aarch64-7.1-${{ steps.get_short_sha.outputs.short_sha }}.tar.gz
      #     asset_content_type: application/gzip

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-windows
      - build-aarch64
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release 1.0.0
          draft: false
          prerelease: false

      - name: Get Short SHA
        id: get_short_sha
        run: echo "::set-output name=short_sha::${GITHUB_SHA::7}"

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-linux-7.1.tar.gz
          asset_name: ffmpeg-linux-7.1-${{ steps.get_short_sha.outputs.short_sha }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-windows-7.1.tar.gz
          asset_name: ffmpeg-windows-7.1-${{ steps.get_short_sha.outputs.short_sha }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Aarch64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-aarch64-7.1.tar.gz
          asset_name: ffmpeg-aarch64-7.1-${{ steps.get_short_sha.outputs.short_sha }}.tar.gz
          asset_content_type: application/gzip