name: Release

on:
  workflow_run:
    workflows:
      - Test
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of all images'
        required: true
        type: boolean
        default: true
      
jobs:
    
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      workflow-changed: ${{ steps.check-workflow.outputs.changed }}
      base-changed: ${{ steps.check-base.outputs.changed }}
      linux-x86_64-changed: ${{ steps.check-linux-x86_64.outputs.changed }}
      linux-aarch64-changed: ${{ steps.check-linux-aarch64.outputs.changed }}
      windows-x86_64-changed: ${{ steps.check-windows-x86_64.outputs.changed }}
      # windows-arm64-changed: ${{ steps.check-windows-arm64.outputs.changed }}
      darwin-x86_64-changed: ${{ steps.check-darwin-x86_64.outputs.changed }}
      darwin-arm64-changed: ${{ steps.check-darwin-arm64.outputs.changed }}
      version: ${{ steps.bump-version.outputs.version }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Bump version
        id: bump-version
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          echo "LATEST_TAG=$LATEST_TAG" 

          # Extract components
          MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
          PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)

          # Validate components
          echo "MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          # Increment patch version
          NEW_PATCH=$(($PATCH + 1))
          NEW_VERSION=v$MAJOR.$MINOR.$NEW_PATCH 
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Check workflow changes
        id: check-workflow
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && ${{ github.event.inputs.force_rebuild }} ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q ".github/workflows/main.yml" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check base image changes
        id: check-base
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && ${{ github.event.inputs.force_rebuild }} ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-base.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Linux x86_64 image changes
        id: check-linux-x86_64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && ${{ github.event.inputs.force_rebuild }} ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-linux-x86_64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Linux Aarch64 image changes
        id: check-linux-aarch64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && ${{ github.event.inputs.force_rebuild }} ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-linux-aarch64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
          
      - name: Check Windows x86_64 image changes
        id: check-windows-x86_64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && ${{ github.event.inputs.force_rebuild }} ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-windows-x86_64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      # - name: Check Windows Arm64 image changes
        # id: check-windows-arm64
        # run: |
        #   git config --global --add safe.directory ${{ github.workspace }}
        #   if [[ "${{ github.event_name }}" == "workflow_dispatch" && ${{ github.event.inputs.force_rebuild }} ]]; then
        #     CHANGED=true
        #   else
        #     CHANGED=false
        #     git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-windows-arm64.dockerfile" && CHANGED=true
        #   fi
        #   echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Darwin x86_64 image changes
        id: check-darwin-x86_64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && ${{ github.event.inputs.force_rebuild }} ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-darwin-x86_64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Check Darwin arm64 image changes
        id: check-darwin-arm64
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && ${{ github.event.inputs.force_rebuild }} ]]; then
            CHANGED=true
          else
            CHANGED=false
            git diff --name-only HEAD^ HEAD | grep -q "ffmpeg-darwin-arm64.dockerfile" && CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-latest
    needs: [check-changes]
    steps:
      
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: dawidd6/action-download-artifact@v8
        with:
          workflow: main.yml
          name: ffmpeg-binaries
          path: downloads
          workflow_conclusion: success
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-changes.outputs.version }}
          release_name: ${{ needs.check-changes.outputs.version }}
          draft: false
          prerelease: false
          
      - name: Upload Linux x86_64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-linux-x86_64-7.1.tar.gz
          asset_name: ffmpeg-linux-x86_64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Linux Aarch64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-linux-aarch64-7.1.tar.gz
          asset_name: ffmpeg-linux-aarch64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows x86_64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-windows-x86_64-7.1.tar.gz
          asset_name: ffmpeg-windows-x86_64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      # - name: Upload Windows aram64 Release Asset
        # uses: actions/upload-release-asset@v1
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # with:
        #   upload_url: ${{ steps.create-release.outputs.upload_url }}
        #   asset_path: downloads/ffmpeg-windows-aram64-7.1.tar.gz
        #   asset_name: ffmpeg-windows-aram64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
        #   asset_content_type: application/gzip

      - name: Upload Darwin x86_64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-darwin-x86_64-7.1.tar.gz
          asset_name: ffmpeg-darwin-x86_64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Darwin arm64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: downloads/ffmpeg-darwin-arm64-7.1.tar.gz
          asset_name: ffmpeg-darwin-arm64-7.1-${{ needs.check-changes.outputs.version }}.tar.gz
          asset_content_type: application/gzip
