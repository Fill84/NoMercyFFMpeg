name: Parallel FFmpeg Test

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      force_test:
        description: 'Force test of all images'
        required: true
        type: boolean
        default: true

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-check.outputs.version }}      

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check release version
        id: version-check
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          echo "Latest tag: $LATEST_TAG$"
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT

  linux-ffmpeg-test:
    needs: check-release
    runs-on: ubuntu-latest
    outputs:
      test_feature: ${{ steps.test-linux.outputs.test_feature }}
      ffmpeg_path: ${{ steps.test-linux.outputs.ffmpeg_path }}
      total_tests: ${{ steps.test-linux.outputs.total_tests }}
      passed_tests: ${{ steps.test-linux.outputs.passed_tests }}

    steps:      
      - name: Download linux release
        id: test-linux
        run: |
            wget https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-linux-7.1-${{ needs.check-release.outputs.version }}.tar.gz
            tar -xvf ffmpeg-linux-7.1-${{ needs.check-release.outputs.version }}.tar.gz
            chmod +x ./ffmpeg
            ./ffmpeg -version

            echo "ffmpeg_path=./ffmpeg" >> $GITHUB_OUTPUT

            mkdir -p test_files

            test_feature() {
                local name=$1
                local command=$2
                local expected_output=$3
                
                total_tests=$((${total_tests} + 1))
                echo "total_tests=${total_tests}" >> $GITHUB_OUTPUT
                echo -n "Testing $name... "
                
                if eval "$command" 2>&1 | grep -q "$expected_output"; then
                    echo -e "PASSED"
                    passed_tests=$((${passed_tests} + 1))
                    echo "passed_tests=${passed_tests}" >> $GITHUB_OUTPUT
                else
                    echo -e "FAILED"
                fi
            }

      - name: Test libx264
        run: test_feature "libx264" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx264 test_files/test_h264.mp4" "encoder.*libx264"
        shell: bash

      # - name: Test libx265
      #   run: test_feature "libx265" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx265 test_files/test_h265.mp4" "encoder.*libx265"
      #   shell: bash

      # - name: Test libvpx
      #   run: test_feature "libvpx" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libvpx-vp9 test_files/test_vp9.webm" "encoder.*libvpx"
      #   shell: bash

      # - name: Test libopus
      #   run: test_feature "libopus" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libopus test_files/test_opus.opus" "encoder.*libopus"
      #   shell: bash

      # - name: Test libmp3lame
      #   run: test_feature "libmp3lame" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libmp3lame test_files/test_mp3.mp3" "encoder.*libmp3lame"
      #   shell: bash

      # - name: Test libfdk_aac
      #   run: test_feature "libfdk_aac" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libfdk_aac test_files/test_aac.m4a" "encoder.*libfdk_aac"
      #   shell: bash

      # - name: Test libvorbis
      #   run: test_feature "libvorbis" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libvorbis test_files/test_vorbis.ogg" "encoder.*libvorbis"
      #   shell: bash
      
      # - name: Test libwebp
      #   run: test_feature "libwebp" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libwebp test_files/test.webp" "encoder.*libwebp"
      #   shell: bash

      # - name: Test libopenjpeg
      #   run: test_feature "libopenjpeg" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libopenjpeg test_files/test.jp2" "encoder.*openjpeg"
      #   shell: bash

      # - name: Test libass
      #   run: test_feature "libass" "${{ steps.test-linux.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -vf ass=test_files/test.ass test_files/test_ass.mp4" "ass"
      #   shell: bash

      # - name: Test libfribidi
      #   run: test_feature "libfribidi" "${{ steps.test-linux.outputs.ffmpeg_path }} -filters 2>&1 | grep fribidi" "fribidi"
      #   shell: bash

      # - name: Test libvmaf
      #   run: test_feature "libvmaf" "${{ steps.test-linux.outputs.ffmpeg_path }} -h 2>&1 | grep vmaf" "libvmaf"
      #   shell: bash
        
      # - name: Test libbluray
      #   run: test_feature "libbluray" "${{ steps.test-linux.outputs.ffmpeg_path }} -h 2>&1 | grep bluray" "bluray"
      #   shell: bash
        
      # - name: Test libcdio
      #   run: test_feature "libcdio" "${{ steps.test-linux.outputs.ffmpeg_path }} -h 2>&1 | grep cdio" "cdio"
      #   shell: bash
        
      # - name: Test libsrt 
      #   run: test_feature "libsrt" "${{ steps.test-linux.outputs.ffmpeg_path }} -h 2>&1 | grep srt" "srt"
      #   shell: bash

      # - name: Test libxml2
      #   run: test_feature "libxml2" "${{ steps.test-linux.outputs.ffmpeg_path }} -h 2>&1 | grep xml" "xml"
      #   shell: bash

      # - name: Test libdav1d
      #   run: test_feature "libdav1d" "${{ steps.test-linux.outputs.ffmpeg_path }} -h decoder 2>&1 | grep dav1d" "dav1d"
      #   shell: bash

      # - name: Test rav1e
      #   run: test_feature "librav1e" "${{ steps.test-linux.outputs.ffmpeg_path }} -h encoder 2>&1 | grep rav1e" "rav1e"
      #   shell: bash

      - name: Test results
        run: |
          rm -rf test_files
          # Print summary
          echo "----------------------------------------"
          echo "Test Summary:"
          echo "Total tests: ${{ steps.test-linux.outputs.total_tests }}"
          echo "Passed tests: ${{ steps.test-linux.outputs.passed_tests }}"
          echo "Failed tests: $((${{ steps.test-linux.outputs.total_tests }} - ${{ steps.test-linux.outputs.passed_tests }}))"
          echo "----------------------------------------"

  windows-ffmpeg-test:
    needs: check-release
    runs-on: windows-latest
    outputs:
      test_feature: ${{ steps.test-windows.outputs.test_feature }}
      ffmpeg_path: ${{ steps.test-windows.outputs.ffmpeg_path }}
      total_tests: ${{ steps.test-windows.outputs.total_tests }}
      passed_tests: ${{ steps.test-windows.outputs.passed_tests }}

    steps:
      - name: Download windows release
        id: test-windows
        run: |
          $client = new-object System.Net.WebClient
          $client.DownloadFile("https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-windows-7.1-${{ needs.check-release.outputs.version }}.tar.gz", "ffmpeg-windows-7.1-${{ needs.check-release.outputs.version }}.tar.gz")        
          tar -xvf ffmpeg-windows-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          ./ffmpeg.exe -version

      #     echo "ffmpeg_path=./ffmpeg.exe" >> $GITHUB_OUTPUT

      #     mkdir -p test_files
         
      #     function Test_Feature {
      #         param (
      #             [string]$Name,
      #             [string]$Command,
      #             [string]$ExpectedOutput
      #         )

      #         $global:TotalTests++
      #         Write-Output "total_tests=$($global:TotalTests)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      #         Write-Host -NoNewline "Testing $Name... "
              
      #         $output = Invoke-Expression $Command 2>&1

      #         if ($output -match [regex]::Escape($ExpectedOutput)) {
      #             Write-Host "PASSED" -ForegroundColor Green
      #             $global:PassedTests++
      #             Write-Output "passed_tests=$($global:PassedTests)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      #         }
      #         else {
      #             Write-Host "FAILED" -ForegroundColor Red
      #         }
      #     }
      #     echo "test_feature=Test_Feature" >> $GITHUB_OUTPUT
        
      # - name: Test libx264
      #   run: ${{ steps.test-windows.outputs.test_features }} "libx264" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx264 test_files/test_h264.mp4" "encoder.*libx264"
      #   shell: bash
      
      # - name: Test libx265
      #   run: ${{ steps.test-windows.outputs.test_features }} "libx265" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx265 test_files/test_h265.mp4" "encoder.*libx265"
      #   shell: bash

      # - name: Test libvpx
      #   run: ${{ steps.test-windows.outputs.test_features }} "libvpx" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libvpx-vp9 test_files/test_vp9.webm" "encoder.*libvpx"
      #   shell: bash

      # - name: Test libopus
      #   run: ${{ steps.test-windows.outputs.test_features }} "libopus" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libopus test_files/test_opus.opus" "encoder.*libopus"
      #   shell: bash

      # - name: Test libmp3lame
      #   run: ${{ steps.test-windows.outputs.test_features }} "libmp3lame" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libmp3lame test_files/test_mp3.mp3" "encoder.*libmp3lame"
      #   shell: bash

      # - name: Test libfdk_aac
      #   run: ${{ steps.test-windows.outputs.test_features }} "libfdk_aac" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libfdk_aac test_files/test_aac.m4a" "encoder.*libfdk_aac"
      #   shell: bash

      # - name: Test libvorbis
      #   run: ${{ steps.test-windows.outputs.test_features }} "libvorbis" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libvorbis test_files/test_vorbis.ogg" "encoder.*libvorbis"
      #   shell: bash

      # - name: Test libwebp
      #   run: ${{ steps.test-windows.outputs.test_features }} "libwebp" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libwebp test_files/test.webp" "encoder.*libwebp"
      #   shell: bash

      # - name: Test libopenjpeg
      #   run: ${{ steps.test-windows.outputs.test_features }} "libopenjpeg" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libopenjpeg test_files/test.jp2" "encoder.*openjpeg"
      #   shell: bash

      # - name: Test libass
      #   run: ${{ steps.test-windows.outputs.test_features }} "libass" "${{ steps.test-windows.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -vf ass=test_files/test.ass test_files/test_ass.mp4" "ass"
      #   shell: bash

      # - name: Test libfribidi
      #   run: ${{ steps.test-windows.outputs.test_features }} "libfribidi" "${{ steps.test-windows.outputs.ffmpeg_path }} -filters 2>&1 | findstr fribidi" "fribidi"
      #   shell: bash

      # - name: Test libvmaf
      #   run: ${{ steps.test-windows.outputs.test_features }} "libvmaf" "${{ steps.test-windows.outputs.ffmpeg_path }} -h 2>&1 | findstr vmaf" "libvmaf"
      #   shell: bash
        
      # - name: Test libbluray
      #   run: ${{ steps.test-windows.outputs.test_features }} "libbluray" "${{ steps.test-windows.outputs.ffmpeg_path }} -h 2>&1 | findstr bluray" "bluray"
      #   shell: bash
        
      # - name: Test libcdio
      #   run: ${{ steps.test-windows.outputs.test_features }} "libcdio" "${{ steps.test-windows.outputs.ffmpeg_path }} -h 2>&1 | findstr cdio" "cdio"
      #   shell: bash
        
      # - name: Test libsrt 
      #   run: ${{ steps.test-windows.outputs.test_features }} "libsrt" "${{ steps.test-windows.outputs.ffmpeg_path }} -h 2>&1 | findstr srt" "srt"
      #   shell: bash

      # - name: Test libxml2
      #   run: ${{ steps.test-windows.outputs.test_features }} "libxml2" "${{ steps.test-windows.outputs.ffmpeg_path }} -h 2>&1 | findstr xml" "xml"
      #   shell: bash

      # - name: Test libdav1d
      #   run: ${{ steps.test-windows.outputs.test_features }} "libdav1d" "${{ steps.test-windows.outputs.ffmpeg_path }} -h decoder 2>&1 | findstr dav1d" "dav1d"
      #   shell: bash

      # - name: Test rav1e
      #   run: ${{ steps.test-windows.outputs.test_features }} "librav1e" "${{ steps.test-windows.outputs.ffmpeg_path }} -h encoder 2>&1 | findstr rav1e" "rav1e"
      #   shell: bash

      # - name: Test results
      #   run: |
      #     rm -rf test_files
      #     # Print summary
      #     echo "----------------------------------------"
      #     echo "Test Summary:"
      #     echo "Total tests: ${{ steps.test-windows.outputs.total_tests }}"
      #     echo "Passed tests: ${{ steps.test-windows.outputs.passed_tests }}"
      #     echo "Failed tests: $((${{ steps.test-windows.outputs.total_tests }} - ${{ steps.test-windows.outputs.passed_tests }}))"
      #     echo "----------------------------------------"

  aarch64-ffmpeg-test:
    needs: check-release
    runs-on: ubuntu-24.04-arm
    outputs:
      test_feature: ${{ steps.test-aarch64.outputs.test_feature }}
      ffmpeg_path: ${{ steps.test-aarch64.outputs.ffmpeg_path }}
      total_tests: ${{ steps.test-aarch64.outputs.total_tests }}
      passed_tests: ${{ steps.test-aarch64.outputs.passed_tests }}
      red: '\033[0;31m'
      green: '\033[0;32m'
      nc: '\033[0m'

    steps:      
      - name: Download aarch64 release
        id: test-aarch64
        run: |
            wget https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-aarch64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
            tar -xvf ffmpeg-aarch64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
            chmod +x ./ffmpeg
            ./ffmpeg -version

      #       echo "ffmpeg_path=./ffmpeg" >> $GITHUB_OUTPUT

      #       mkdir -p test_files

      #       test_feature() {
      #           local name=$1
      #           local command=$2
      #           local expected_output=$3
                
      #           total_tests=$((${total_tests} + 1))
      #           echo "total_tests=${total_tests}" >> $GITHUB_OUTPUT
      #           echo -n "Testing $name... "
                
      #           if eval "$command" 2>&1 | grep -q "$expected_output"; then
      #               echo -e "${{ needs.check-release.outputs.green }}PASSED${{ needs.check-release.outputs.nc }}"
      #               passed_tests=$((${passed_tests} + 1))
      #               echo "passed_tests=${passed_tests}" >> $GITHUB_OUTPUT
      #           else
      #               echo -e "${{ needs.check-release.outputs.red }}FAILED${{ needs.check-release.outputs.nc }}"
      #           fi
      #       }
      #       echo "test_feature=test_feature" >> $GITHUB_OUTPUT

      # - name: Test libx264
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libx264" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx264 test_files/test_h264.mp4" "encoder.*libx264"
      #   shell: bash

      # - name: Test libx265
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libx265" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx265 test_files/test_h265.mp4" "encoder.*libx265"
      #   shell: bash

      # - name: Test libvpx
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libvpx" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libvpx-vp9 test_files/test_vp9.webm" "encoder.*libvpx"
      #   shell: bash

      # - name: Test libopus
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libopus" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libopus test_files/test_opus.opus" "encoder.*libopus"
      #   shell: bash

      # - name: Test libmp3lame
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libmp3lame" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libmp3lame test_files/test_mp3.mp3" "encoder.*libmp3lame"
      #   shell: bash

      # - name: Test libfdk_aac
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libfdk_aac" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libfdk_aac test_files/test_aac.m4a" "encoder.*libfdk_aac"
      #   shell: bash

      # - name: Test libvorbis
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libvorbis" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i anullsrc=duration=1 -c:a libvorbis test_files/test_vorbis.ogg" "encoder.*libvorbis"
      #   shell: bash
      
      # - name: Test libwebp
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libwebp" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libwebp test_files/test.webp" "encoder.*libwebp"
      #   shell: bash

      # - name: Test libopenjpeg
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libopenjpeg" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libopenjpeg test_files/test.jp2" "encoder.*openjpeg"
      #   shell: bash

      # - name: Test libass
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libass" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -vf ass=test_files/test.ass test_files/test_ass.mp4" "ass"
      #   shell: bash

      # - name: Test libfribidi
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libfribidi" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -filters 2>&1 | grep fribidi" "fribidi"
      #   shell: bash

      # - name: Test libvmaf
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libvmaf" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -h 2>&1 | grep vmaf" "libvmaf"
      #   shell: bash
        
      # - name: Test libbluray
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libbluray" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -h 2>&1 | grep bluray" "bluray"
      #   shell: bash
        
      # - name: Test libcdio
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libcdio" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -h 2>&1 | grep cdio" "cdio"
      #   shell: bash
        
      # - name: Test libsrt 
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libsrt" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -h 2>&1 | grep srt" "srt"
      #   shell: bash

      # - name: Test libxml2
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libxml2" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -h 2>&1 | grep xml" "xml"
      #   shell: bash

      # - name: Test libdav1d
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "libdav1d" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -h decoder 2>&1 | grep dav1d" "dav1d"
      #   shell: bash

      # - name: Test rav1e
      #   run: ${{ steps.test-aarch64.outputs.test_features }} "librav1e" "${{ steps.test-aarch64.outputs.ffmpeg_path }} -h encoder 2>&1 | grep rav1e" "rav1e"
      #   shell: bash

      # - name: Test results
      #   run: |
      #     rm -rf test_files
      #     # Print summary
      #     echo "----------------------------------------"
      #     echo "Test Summary:"
      #     echo "Total tests: ${{ steps.test-aarch64.outputs.total_tests }}"
      #     echo "Passed tests: ${{ steps.test-aarch64.outputs.passed_tests }}"
      #     echo "Failed tests: $((${{ steps.test-aarch64.outputs.total_tests }} - ${{ steps.test-aarch64.outputs.passed_tests }}))"
      #     echo "----------------------------------------"

  darwin-x86_64:
    needs: check-release
    runs-on: macos-13
    outputs:
      test_feature: ${{ steps.test-darwin-x86_64.outputs.test_feature }}
      ffmpeg_path: ${{ steps.test-darwin-x86_64.outputs.ffmpeg_path }}
      total_tests: ${{ steps.test-darwin-x86_64.outputs.total_tests }}
      passed_tests: ${{ steps.test-darwin-x86_64.outputs.passed_tests }}
      red: '\033[0;31m'
      green: '\033[0;32m'
      nc: '\033[0m'

    steps:      
      - name: Download aarch64 release
        id: test-darwin-x86_64
        run: |
            wget https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-darwin-x86_64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
            tar -xvf ffmpeg-darwin-x86_64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
            chmod +x ./ffmpeg
            ./ffmpeg -version

  darwin-arm64:
    needs: check-release
    runs-on: macos-latest
    outputs:
      test_feature: ${{ steps.test-darwin-arm64.outputs.test_feature }}
      ffmpeg_path: ${{ steps.test-darwin-arm64.outputs.ffmpeg_path }}
      total_tests: ${{ steps.test-darwin-arm64.outputs.total_tests }}
      passed_tests: ${{ steps.test-darwin-arm64.outputs.passed_tests }}
      red: '\033[0;31m'
      green: '\033[0;32m'
      nc: '\033[0m'

    steps:      
      - name: Download aarch64 release
        id: test-darwin-arm64
        run: |
            wget https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-darwin-arm64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
            tar -xvf ffmpeg-darwin-arm64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
            chmod +x ./ffmpeg
            ./ffmpeg -version
