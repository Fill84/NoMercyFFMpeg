name: Parallel FFmpeg Test

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      force_test:
        description: 'Force test of all images'
        required: true
        type: boolean
        default: true

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-check.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check release version
        id: version-check
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          echo "Latest tag: $LATEST_TAG$"
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT

  # Linux x86_64 tests
  linux-x86_64-ffmpeg-download:
    needs: check-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download linux release
        id: linux-test
        run: |
          wget https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-linux-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          tar -xvf ffmpeg-linux-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          chmod +x ./ffmpeg

          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0

          mkdir -p test_files
          dd if=/dev/urandom of=test_files/test.raw bs=1M count=1

          run_test() {
            local name=$1
            local command=$2
            local expected_output=$3
            
            TOTAL_TESTS=$((TOTAL_TESTS + 1))
            echo "Testing $name... "

            if eval "${{ github.workspace }}/ffmpeg $command" 2>&1 | grep -q "$expected_output"; then
              PASSED_TESTS=$((PASSED_TESTS + 1))
              echo "✅ PASSED"
            else
              FAILED_TESTS=$((FAILED_TESTS + 1))
              echo "❌ FAILED"
            fi
          }

  linux-x86_64-ffmpeg-test:
    needs: linux-x86_64-ffmpeg-download
    runs-on: ubuntu-latest

    steps:
      # Basic tests
      - name: Version check
        run: run_test "ffmpeg version" "-version" "7.1"
        shell: bash

      # Video codecs
      - name: Video codec libx264
        run: run_test "libx264" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx264 test_files/test_h264.mp4" "encoder.*libx264"
        shell: bash

      - name: Video codec libx265
        run: run_test "libx265" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx265 test_files/test_h265.mp4" "encoder.*libx265"
        shell: bash

      - name: Video codec libvpx
        run: run_test "libvpx" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libvpx-vp9 test_files/test_vp9.webm" "encoder.*libvpx-vp9"
        shell: bash

      # - name: Video coded libaom
      #   run: run_test "libaom" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libaom-av1 test_files/test_av1.mkv" "encoder.*libaom-av1"
      #   shell: bash

      # Audio codecs
      - name: Audio codec libfdk_aac
        run: run_test "libfdk_aac" "-y -f lavfi -i anullsrc=duration=1 -c:a libfdk_aac test_files/test_aac.m4a" "encoder.*libfdk_aac"
        shell: bash

      - name: Audio codec libopus
        run: run_test "libopus" "-y -f lavfi -i anullsrc=duration=1 -c:a libopus test_files/test_opus.opus" "encoder.*libopus"
        shell: bash

      - name: Audio codec libmp3lame
        run: run_test "libmp3lame" "-y -f lavfi -i anullsrc=duration=1 -c:a libmp3lame test_files/test_mp3.mp3" "encoder.*libmp3lame"
        shell: bash

      # Image codecs
      - name: Image codec libwebp
        run: run_test "libwebp" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libwebp test_files/test.webp" "encoder.*libwebp"
        shell: bash

      - name: Image codec libopenjpeg
        run: run_test "libopenjpeg" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libopenjpeg test_files/test.jp2" "encoder.*openjpeg"
        shell: bash

      # Subtitle codecs
      - name: Subtitle codec libass
        run: run_test "libass" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate
        shell: bash

      - name: Subtitle codec libfribidi
        run: run_test "libfribidi" "-filters 2>&1 | grep fribidi" "fribidi"
        shell: bash

      # Hardware acceleration
      - name: Hardware acceleration NVENC
        run: run_test "NVENC" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v h264_nvenc test_files/test_nvenc.mp4" "encoder.*h264_nvenc"
        shell: bash

      - name: Hardware acceleration VAAPI
        run: run_test "VAAPI" "-y -vaapi_device /dev/dri/renderD128 -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -vf 'format=nv12,hwupload' -c:v h264_vaapi test_files/test_vaapi.mp4 2>&1" "vaapi"
        shell: bash

      # Additional format tests
      - name: Additional format libbluray
        run: run_test "libbluray" "-h 2>&1 | grep bluray" "bluray"
        shell: bash

      - name: Additional format libcdio
        run: run_test "libcdio" "-h 2>&1 | grep cdio" "cdio"
        shell: bash

      - name: Additional format libsrt
        run: run_test "libsrt" "-h 2>&1 | grep srt" "srt"
        shell: bash

      - name: Additional format libxml2
        run: run_test "libxml2" "-h 2>&1 | grep xml" "xml"
        shell: bash

      # AV1 codec tests
      - name: AV1 codec libdav1d
        run: run_test "libdav1d" "-h decoder 2>&1 | grep dav1d" "dav1d"
        shell: bash

      - name: AV1 codec librav1e
        run: run_test "librav1e" "-h encoder 2>&1 | grep rav1e" "rav1e"
        shell: bash

      # Cleanup
      - name: Cleanup
        run: rm -rf test_files
        shell: bash

  linux-x86_64-ffmpeg-report:
    needs: linux-x86_64-ffmpeg-test
    runs-on: ubuntu-latest

    steps:
      - name: Print summary
        run: |
          # Print summary
          echo "----------------------------------------"
          echo "Test Summary:"
          echo "Total tests: $TOTAL_TESTS"
          echo "Passed tests: $PASSED_TESTS"
          echo "Failed tests: $FAILED_TESTS"
          echo "----------------------------------------"

          # Exit with failure if any tests failed
          exit $FAILED_TESTS
        shell: bash

  # Windows x86_64 tests
  windows-x86_64-ffmpeg-download:
    needs: check-release
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download windows release
        id: windows-test
        run: |
          $client = new-object System.Net.WebClient
          $client.DownloadFile("https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-windows-7.1-${{ needs.check-release.outputs.version }}.tar.gz", "ffmpeg-windows-7.1-${{ needs.check-release.outputs.version }}.tar.gz")        
          tar -xvf ffmpeg-windows-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          $script:TOTAL_TESTS = 0
          $script:PASSED_TESTS = 0
          $script:FAILED_TESTS = 0

          mkdir -p test_files

          # Create test files
          New-Item -ItemType Directory -Path test_files -Force | Out-Null

          # Create a 1MB random file
          $randomBytes = New-Object Byte[] 1048576
          (New-Object Random).NextBytes($randomBytes)
          [System.IO.File]::WriteAllBytes("test_files/test.raw", $randomBytes)

          function run_test {
            param (
              [string]$Name,
              [string]$Command,
              [string]$ExpectedOutput
            )

            $script:TOTAL_TESTS++
            Write-Host -NoNewline "Testing $Name... "

            try {
              $script:output = Invoke-Expression "${{ github.workspace }}/ffmpeg.exe $Command 2>&1" | Out-String
              if ($script:output -cmatch $ExpectedOutput) {
                Write-Host "✅ PASSED"
                $script:PASSED_TESTS++
              } else {
                Write-Host "❌ FAILED"
                $script:FAILED_TESTS++
              }
            } catch {
              Write-Host "❌ FAILED (Error)"
              $script:FAILED_TESTS++
            }
          }
        shell: pwsh
  
  windows-x86_64-ffmpeg-test:
    needs: windows-x86_64-ffmpeg-download
    runs-on: windows-latest

    steps:
      # Basic tests
      - name: Version check
        run: run_test "ffmpeg version" "-version" "7.1"
        shell: pwsh
      
      # Video codecs
      - name: Video codec libx264
        run: run_test "libx264" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx264 test_files/test_h264.mp4" "encoder.*libx264"
        shell: pwsh
      
      - name: Video codec libx265
        run: run_test "libx265" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx265 test_files/test_h265.mp4" "encoder.*libx265"
        shell: pwsh

      - name: Video codec libvpx
        run: run_test "libvpx" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libvpx-vp9 test_files/test_vp9.webm" "encoder.*libvpx-vp9"
        shell: pwsh
      
      # - name: Video coded libaom
      #   run: run_test "libaom" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libaom-av1 test_files/test_av1.mkv" "encoder.*libaom-av1"
      #   shell: pwsh
      
      # Audio codecs
      - name: Audio codec libfdk_aac
        run: run_test "libfdk_aac" "-y -f lavfi -i anullsrc=duration=1 -c:a libfdk_aac test_files/test_aac.m4a" "encoder.*libfdk_aac"
        shell: pwsh

      - name: Audio codec libopus
        run: run_test "libopus" "-y -f lavfi -i anullsrc=duration=1 -c:a libopus test_files/test_opus.opus" "encoder.*libopus"
        shell: pwsh

      - name: Audio codec libmp3lame
        run: run_test "libmp3lame" "-y -f lavfi -i anullsrc=duration=1 -c:a libmp3lame test_files/test_mp3.mp3" "encoder.*libmp3lame"
        shell: pwsh

      # Image codecs
      - name: Image codec libwebp
        run: run_test "libwebp" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libwebp test_files/test.webp" "encoder.*libwebp"
        shell: pwsh

      - name: Image codec libopenjpeg
        run: run_test "libopenjpeg" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libopenjpeg test_files/test.jp2" "encoder.*openjpeg"
        shell: pwsh

      # Subtitle codecs
      - name: Subtitle codec libass
        run: run_test "libass" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate
        shell: pwsh

      - name: Subtitle codec libfribidi
        run: run_test "libfribidi" "-filters 2>&1 | findstr fribidi" "fribidi"
        shell: pwsh
      
      # Hardware acceleration
      - name: Hardware acceleration NVENC
        run: run_test "NVENC" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v h264_nvenc test_files/test_nvenc.mp4" "encoder.*h264_nvenc"
        shell: pwsh

      - name: Hardware acceleration VAAPI
        run: run_test "VAAPI" "-y -vaapi_device /dev/dri/renderD128 -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -vf 'format=nv12,hwupload' -c:v h264_vaapi test_files/test_vaapi.mp4 2>&1" "vaapi"
        shell: pwsh
      
      # Additional format tests
      - name: Additional format libbluray
        run: run_test "libbluray" "-h 2>&1 | findstr bluray" "bluray"
        shell: pwsh

      - name: Additional format libcdio
        run: run_test "libcdio" "-h 2>&1 | findstr cdio" "cdio"
        shell: pwsh

      - name: Additional format libsrt
        run: run_test "libsrt" "-h 2>&1 | findstr srt" "srt"
        shell: pwsh

      - name: Additional format libxml2
        run: run_test "libxml2" "-h 2>&1 | findstr xml" "xml"
        shell: pwsh

      # AV1 codec tests
      - name: AV1 codec libdav1d
        run: run_test "libdav1d" "-h decoder 2>&1 | findstr dav1d" "dav1d"
        shell: pwsh

      - name: AV1 codec librav1e
        run: run_test "librav1e" "-h encoder 2>&1 | findstr rav1e" "rav1e"
        shell: pwsh

      # Cleanup
      - name: Cleanup
        run: Remove-Item -Path test_files -Recurse -Force
        shell: pwsh
  
  windows-x86_64-ffmpeg-report:
    needs: windows-x86_64-ffmpeg-test
    runs-on: windows-latest

    steps:
      - name: Print summary
        run: |
          # Print summary
          Write-Host "----------------------------------------"
          Write-Host "Test Summary:"
          Write-Host "Total tests: $script:TOTAL_TESTS"
          Write-Host "Passed tests: $script:PASSED_TESTS"
          Write-Host "Failed tests: $script:FAILED_TESTS"
          Write-Host "----------------------------------------"

          # Exit with failure if any tests failed
          exit $script:FAILED_TESTS
        shell: pwsh

  # Linux aarch64 tests
  linux-aarch64-ffmpeg-download:
    needs: check-release
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download aarch64 release
        id: aarch64-test
        run: |
          wget https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-aarch64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          tar -xvf ffmpeg-aarch64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          chmod +x ./ffmpeg

          echo "ffmpeg_path=./ffmpeg" >> $GITHUB_OUTPUT
          
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0

          mkdir -p test_files
          dd if=/dev/urandom of=test_files/test.raw bs=1M count=1

          run_test() {
            local name=$1
            local command=$2
            local expected_output=$3
            
            TOTAL_TESTS=$((TOTAL_TESTS + 1))
            echo "Testing $name... "

            if eval "${{ github.workspace }}/ffmpeg $command" 2>&1 | grep -q "$expected_output"; then
              PASSED_TESTS=$((PASSED_TESTS + 1))
              echo "✅ PASSED"
            else
              FAILED_TESTS=$((FAILED_TESTS + 1))
              echo "❌ FAILED"
            fi
          }
  
  linux-aarch64-ffmpeg-test:
    needs: linux-aarch64-ffmpeg-download
    runs-on: ubuntu-24.04-arm

    steps:
      # Basic tests
      - name: Version check
        run: run_test "ffmpeg version" "-version" "7.1"
        shell: bash

      # Video codecs
      - name: Video codec libx264
        run: run_test "libx264" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx264 test_files/test_h264.mp4" "encoder.*libx264"
        shell: bash

      - name: Video codec libx265
        run: run_test "libx265" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx265 test_files/test_h265.mp4" "encoder.*libx265"
        shell: bash

      - name: Video codec libvpx
        run: run_test "libvpx" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libvpx-vp9 test_files/test_vp9.webm" "encoder.*libvpx-vp9"
        shell: bash

      # - name: Video coded libaom
      #   run: run_test "libaom" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libaom-av1 test_files/test_av1.mkv" "encoder.*libaom-av1"
      #   shell: bash

      # Audio codecs
      - name: Audio codec libfdk_aac
        run: run_test "libfdk_aac" "-y -f lavfi -i anullsrc=duration=1 -c:a libfdk_aac test_files/test_aac.m4a" "encoder.*libfdk_aac"
        shell: bash

      - name: Audio codec libopus
        run: run_test "libopus" "-y -f lavfi -i anullsrc=duration=1 -c:a libopus test_files/test_opus.opus" "encoder.*libopus"
        shell: bash

      - name: Audio codec libmp3lame
        run: run_test "libmp3lame" "-y -f lavfi -i anullsrc=duration=1 -c:a libmp3lame test_files/test_mp3.mp3" "encoder.*libmp3lame"
        shell: bash

      # Image codecs
      - name: Image codec libwebp
        run: run_test "libwebp" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libwebp test_files/test.webp" "encoder.*libwebp"
        shell: bash

      - name: Image codec libopenjpeg
        run: run_test "libopenjpeg" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libopenjpeg test_files/test.jp2" "encoder.*openjpeg"
        shell: bash

      # Subtitle codecs
      - name: Subtitle codec libass
        run: run_test "libass" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate
        shell: bash

      - name: Subtitle codec libfribidi
        run: run_test "libfribidi" "-filters 2>&1 | grep fribidi" "fribidi"
        shell: bash

      # Hardware acceleration
      - name: Hardware acceleration NVENC
        run: run_test "NVENC" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v h264_nvenc test_files/test_nvenc.mp4" "encoder.*h264_nvenc"
        shell: bash

      - name: Hardware acceleration VAAPI
        run: run_test "VAAPI" "-y -vaapi_device /dev/dri/renderD128 -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -vf 'format=nv12,hwupload' -c:v h264_vaapi test_files/test_vaapi.mp4 2>&1" "vaapi"
        shell: bash

      # Additional format tests
      - name: Additional format libbluray
        run: run_test "libbluray" "-h 2>&1 | grep bluray" "bluray"
        shell: bash

      - name: Additional format libcdio
        run: run_test "libcdio" "-h 2>&1 | grep cdio" "cdio"
        shell: bash

      - name: Additional format libsrt
        run: run_test "libsrt" "-h 2>&1 | grep srt" "srt"
        shell: bash

      - name: Additional format libxml2
        run: run_test "libxml2" "-h 2>&1 | grep xml" "xml"
        shell: bash

      # AV1 codec tests
      - name: AV1 codec libdav1d
        run: run_test "libdav1d" "-h decoder 2>&1 | grep dav1d" "dav1d"
        shell: bash

      - name: AV1 codec librav1e
        run: run_test "librav1e" "-h encoder 2>&1 | grep rav1e" "rav1e"
        shell: bash

      # Cleanup
      - name: Cleanup
        run: rm -rf test_files
        shell: bash

  linux-aarch64-ffmpeg-report:
    needs: linux-aarch64-ffmpeg-test
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Print summary
        run: |
          # Print summary
          echo "----------------------------------------"
          echo "Test Summary:"
          echo "Total tests: $TOTAL_TESTS"
          echo "Passed tests: $PASSED_TESTS"
          echo "Failed tests: $FAILED_TESTS"
          echo "----------------------------------------"

          # Exit with failure if any tests failed
          exit $FAILED_TESTS
        shell: bash

  # Darwin x86_64 tests
  darwin-x86_64-ffmpeg-download:
    needs: check-release
    runs-on: macos-13

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download darwin-x86_64 release
        id: darwin_x86_64-test
        run: |
          wget https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-darwin-x86_64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          tar -xvf ffmpeg-darwin-x86_64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          chmod +x ./ffmpeg ./tests/ffmpeg-tests.sh
          
          echo "ffmpeg_path=./ffmpeg" >> $GITHUB_OUTPUT

          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0

          mkdir -p test_files
          dd if=/dev/urandom of=test_files/test.raw bs=1M count=1

          run_test() {
            local name=$1
            local command=$2
            local expected_output=$3
            
            TOTAL_TESTS=$((TOTAL_TESTS + 1))
            echo "Testing $name... "

            if eval "${{ github.workspace }}/ffmpeg $command" 2>&1 | grep -q "$expected_output"; then
              PASSED_TESTS=$((PASSED_TESTS + 1))
              echo "✅ PASSED"
            else
              FAILED_TESTS=$((FAILED_TESTS + 1))
              echo "❌ FAILED"
            fi
          }

  darwin-x86_64-ffmpeg-test:
    needs: darwin-x86_64-ffmpeg-download
    runs-on: macos-13

    steps:
      # Basic tests
      - name: Version check
        run: run_test "ffmpeg version" "-version" "7.1"
        shell: bash

      # Video codecs
      - name: Video codec libx264
        run: run_test "libx264" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx264 test_files/test_h264.mp4" "encoder.*libx264"
        shell: bash

      - name: Video codec libx265
        run: run_test "libx265" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx265 test_files/test_h265.mp4" "encoder.*libx265"
        shell: bash

      - name: Video codec libvpx
        run: run_test "libvpx" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libvpx-vp9 test_files/test_vp9.webm" "encoder.*libvpx-vp9"
        shell: bash

      # - name: Video coded libaom
      #   run: run_test "libaom" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libaom-av1 test_files/test_av1.mkv" "encoder.*libaom-av1"
      #   shell: bash

      # Audio codecs
      - name: Audio codec libfdk_aac
        run: run_test "libfdk_aac" "-y -f lavfi -i anullsrc=duration=1 -c:a libfdk_aac test_files/test_aac.m4a" "encoder.*libfdk_aac"
        shell: bash

      - name: Audio codec libopus
        run: run_test "libopus" "-y -f lavfi -i anullsrc=duration=1 -c:a libopus test_files/test_opus.opus" "encoder.*libopus"
        shell: bash

      - name: Audio codec libmp3lame
        run: run_test "libmp3lame" "-y -f lavfi -i anullsrc=duration=1 -c:a libmp3lame test_files/test_mp3.mp3" "encoder.*libmp3lame"
        shell: bash

      # Image codecs
      - name: Image codec libwebp
        run: run_test "libwebp" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libwebp test_files/test.webp" "encoder.*libwebp"
        shell: bash

      - name: Image codec libopenjpeg
        run: run_test "libopenjpeg" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libopenjpeg test_files/test.jp2" "encoder.*openjpeg"
        shell: bash

      # Subtitle codecs
      - name: Subtitle codec libass
        run: run_test "libass" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate
        shell: bash

      - name: Subtitle codec libfribidi
        run: run_test "libfribidi" "-filters 2>&1 | grep fribidi" "fribidi"
        shell: bash

      # Hardware acceleration
      - name: Hardware acceleration NVENC
        run: run_test "NVENC" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v h264_nvenc test_files/test_nvenc.mp4" "encoder.*h264_nvenc"
        shell: bash

      - name: Hardware acceleration VAAPI
        run: run_test "VAAPI" "-y -vaapi_device /dev/dri/renderD128 -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -vf 'format=nv12,hwupload' -c:v h264_vaapi test_files/test_vaapi.mp4 2>&1" "vaapi"
        shell: bash

      # Additional format tests
      - name: Additional format libbluray
        run: run_test "libbluray" "-h 2>&1 | grep bluray" "bluray"
        shell: bash

      - name: Additional format libcdio
        run: run_test "libcdio" "-h 2>&1 | grep cdio" "cdio"
        shell: bash

      - name: Additional format libsrt
        run: run_test "libsrt" "-h 2>&1 | grep srt" "srt"
        shell: bash

      - name: Additional format libxml2
        run: run_test "libxml2" "-h 2>&1 | grep xml" "xml"
        shell: bash

      # AV1 codec tests
      - name: AV1 codec libdav1d
        run: run_test "libdav1d" "-h decoder 2>&1 | grep dav1d" "dav1d"
        shell: bash

      - name: AV1 codec librav1e
        run: run_test "librav1e" "-h encoder 2>&1 | grep rav1e" "rav1e"
        shell: bash

      # Cleanup
      - name: Cleanup
        run: rm -rf test_files
        shell: bash

  darwin-x86_64-ffmpeg-report:
    needs: darwin-x86_64-ffmpeg-test
    runs-on: macos-13
    
    steps:
      - name: Print summary
        run: |
          # Print summary
          echo "----------------------------------------"
          echo "Test Summary:"
          echo "Total tests: $TOTAL_TESTS"
          echo "Passed tests: $PASSED_TESTS"
          echo "Failed tests: $FAILED_TESTS"
          echo "----------------------------------------"

          # Exit with failure if any tests failed
          exit $FAILED_TESTS
        shell: bash          

  # Darwin arm64 tests
  darwin-arm64-ffmpeg-download:
    needs: check-release
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download darwin-arm64 release
        id: darwin_aarch64-test
        run: |
          wget https://github.com/NoMercy-Entertainment/NoMercyFFMpeg/releases/download/${{ needs.check-release.outputs.version }}/ffmpeg-darwin-arm64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          tar -xvf ffmpeg-darwin-arm64-7.1-${{ needs.check-release.outputs.version }}.tar.gz
          chmod +x ./ffmpeg

          echo "ffmpeg_path=./ffmpeg" >> $GITHUB_OUTPUT
          
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0

          mkdir -p test_files
          dd if=/dev/urandom of=test_files/test.raw bs=1M count=1
          
          run_test() {
            local name=$1
            local command=$2
            local expected_output=$3
            
            TOTAL_TESTS=$((TOTAL_TESTS + 1))
            echo "Testing $name... "

            if eval "${{ github.workspace }}/ffmpeg $command" 2>&1 | grep -q "$expected_output"; then
              PASSED_TESTS=$((PASSED_TESTS + 1))
              echo "✅ PASSED"
            else
              FAILED_TESTS=$((FAILED_TESTS + 1))
              echo "❌ FAILED"
            fi
          }

  darwin-arm64-ffmpeg-test:
    needs: darwin-arm64-ffmpeg-download
    runs-on: macos-latest

    steps:
      # Basic tests
      - name: Version check
        run: run_test "ffmpeg version" "-version" "7.1"
        shell: bash

      # Video codecs
      - name: Video codec libx264
        run: run_test "libx264" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx264 test_files/test_h264.mp4" "encoder.*libx264"
        shell: bash

      - name: Video codec libx265
        run: run_test "libx265" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libx265 test_files/test_h265.mp4" "encoder.*libx265"
        shell: bash

      - name: Video codec libvpx
        run: run_test "libvpx" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libvpx-vp9 test_files/test_vp9.webm" "encoder.*libvpx-vp9"
        shell: bash

      # - name: Video coded libaom
      #   run: run_test "libaom" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v libaom-av1 test_files/test_av1.mkv" "encoder.*libaom-av1"
      #   shell: bash

      # Audio codecs
      - name: Audio codec libfdk_aac
        run: run_test "libfdk_aac" "-y -f lavfi -i anullsrc=duration=1 -c:a libfdk_aac test_files/test_aac.m4a" "encoder.*libfdk_aac"
        shell: bash

      - name: Audio codec libopus
        run: run_test "libopus" "-y -f lavfi -i anullsrc=duration=1 -c:a libopus test_files/test_opus.opus" "encoder.*libopus"
        shell: bash

      - name: Audio codec libmp3lame
        run: run_test "libmp3lame" "-y -f lavfi -i anullsrc=duration=1 -c:a libmp3lame test_files/test_mp3.mp3" "encoder.*libmp3lame"
        shell: bash

      # Image codecs
      - name: Image codec libwebp
        run: run_test "libwebp" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libwebp test_files/test.webp" "encoder.*libwebp"
        shell: bash

      - name: Image codec libopenjpeg
        run: run_test "libopenjpeg" "-y -f lavfi -i testsrc=duration=1:size=640x480:rate=1 -frames:v 1 -c:v libopenjpeg test_files/test.jp2" "encoder.*openjpeg"
        shell: bash

      # Subtitle codecs
      - name: Subtitle codec libass
        run: run_test "libass" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate
        shell: bash

      - name: Subtitle codec libfribidi
        run: run_test "libfribidi" "-filters 2>&1 | grep fribidi" "fribidi"
        shell: bash

      # Hardware acceleration
      - name: Hardware acceleration NVENC
        run: run_test "NVENC" "-y -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -c:v h264_nvenc test_files/test_nvenc.mp4" "encoder.*h264_nvenc"
        shell: bash

      - name: Hardware acceleration VAAPI
        run: run_test "VAAPI" "-y -vaapi_device /dev/dri/renderD128 -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 -vf 'format=nv12,hwupload' -c:v h264_vaapi test_files/test_vaapi.mp4 2>&1" "vaapi"
        shell: bash

      # Additional format tests
      - name: Additional format libbluray
        run: run_test "libbluray" "-h 2>&1 | grep bluray" "bluray"
        shell: bash

      - name: Additional format libcdio
        run: run_test "libcdio" "-h 2>&1 | grep cdio" "cdio"
        shell: bash

      - name: Additional format libsrt
        run: run_test "libsrt" "-h 2>&1 | grep srt" "srt"
        shell: bash

      - name: Additional format libxml2
        run: run_test "libxml2" "-h 2>&1 | grep xml" "xml"
        shell: bash

      # AV1 codec tests
      - name: AV1 codec libdav1d
        run: run_test "libdav1d" "-h decoder 2>&1 | grep dav1d" "dav1d"
        shell: bash

      - name: AV1 codec librav1e
        run: run_test "librav1e" "-h encoder 2>&1 | grep rav1e" "rav1e"
        shell: bash

      # Cleanup
      - name: Cleanup
        run: rm -rf test_files
        shell: bash

  darwin-arm64-ffmpeg-report:
    needs: darwin-arm64-ffmpeg-test
    runs-on: macos-latest

    steps:
      - name: Print summary
        run: |
          # Print summary
          echo "----------------------------------------"
          echo "Test Summary:"
          echo "Total tests: $TOTAL_TESTS"
          echo "Passed tests: $PASSED_TESTS"
          echo "Failed tests: $FAILED_TESTS"
          echo "----------------------------------------"

          # Exit with failure if any tests failed
          exit $FAILED_TESTS
        shell: bash
